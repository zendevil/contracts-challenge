// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Reward extends ethereum.Event {
  get params(): Reward__Params {
    return new Reward__Params(this);
  }
}

export class Reward__Params {
  _event: Reward;

  constructor(event: Reward) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawDeposit extends ethereum.Event {
  get params(): WithdrawDeposit__Params {
    return new WithdrawDeposit__Params(this);
  }
}

export class WithdrawDeposit__Params {
  _event: WithdrawDeposit;

  constructor(event: WithdrawDeposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawReward extends ethereum.Event {
  get params(): WithdrawReward__Params {
    return new WithdrawReward__Params(this);
  }
}

export class WithdrawReward__Params {
  _event: WithdrawReward;

  constructor(event: WithdrawReward) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ETHPool extends ethereum.SmartContract {
  static bind(address: Address): ETHPool {
    return new ETHPool("ETHPool", address);
  }

  _team(param0: BigInt): Address {
    let result = super.call("_team", "_team(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try__team(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("_team", "_team(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allDeposits(): BigInt {
    let result = super.call("allDeposits", "allDeposits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("allDeposits", "allDeposits():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositInPool(): BigInt {
    let result = super.call(
      "getDepositInPool",
      "getDepositInPool():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDepositInPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositInPool",
      "getDepositInPool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardInPool(): BigInt {
    let result = super.call(
      "getRewardInPool",
      "getRewardInPool():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardInPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardInPool",
      "getRewardInPool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  poolMembers(param0: BigInt): Address {
    let result = super.call("poolMembers", "poolMembers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_poolMembers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolMembers",
      "poolMembers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get team_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositRewardCall extends ethereum.Call {
  get inputs(): DepositRewardCall__Inputs {
    return new DepositRewardCall__Inputs(this);
  }

  get outputs(): DepositRewardCall__Outputs {
    return new DepositRewardCall__Outputs(this);
  }
}

export class DepositRewardCall__Inputs {
  _call: DepositRewardCall;

  constructor(call: DepositRewardCall) {
    this._call = call;
  }
}

export class DepositRewardCall__Outputs {
  _call: DepositRewardCall;

  constructor(call: DepositRewardCall) {
    this._call = call;
  }
}

export class WithdrawDepositCall extends ethereum.Call {
  get inputs(): WithdrawDepositCall__Inputs {
    return new WithdrawDepositCall__Inputs(this);
  }

  get outputs(): WithdrawDepositCall__Outputs {
    return new WithdrawDepositCall__Outputs(this);
  }
}

export class WithdrawDepositCall__Inputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDepositCall__Outputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }
}

export class WithdrawRewardCall extends ethereum.Call {
  get inputs(): WithdrawRewardCall__Inputs {
    return new WithdrawRewardCall__Inputs(this);
  }

  get outputs(): WithdrawRewardCall__Outputs {
    return new WithdrawRewardCall__Outputs(this);
  }
}

export class WithdrawRewardCall__Inputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawRewardCall__Outputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }
}
